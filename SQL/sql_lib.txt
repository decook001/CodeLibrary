-- set operation

(select course id
from section
where semester = ’Fall’ and year= 2009)
intersect all
(select course id
from section
where semester = ’Spring’ and year= 2010);

-- aggregation with grouping

select course_id, semester, year, sec_id, avg (tot cred)
from takes natural join student
where year = 2009
group by course_id, semester, year, sec_id
having count (ID) >= 2;


-- default value

create table student
(ID varchar (5),
name varchar (20) not null,
dept name varchar (20),
tot cred numeric (3,0) default 0,
primary key (ID));

-- typedef

create domain YearlySalary numeric(8,2) constraint salary value test check(value >= 29000.00);
create domain DDollars as numeric(12,2) not null;
create type Dollars as numeric(12,2) final;
cast (department.budget to numeric(12,2))

create table department
(dept name varchar (20),
building varchar (15),
budget Dollars);

-- table extension

create table temp_instructor like instructor;


-- Authorization

grant <privilege list>
on <relation name or view name>
to <user/role list>;


-- function

create function dept_count(dept_name varchar(20)) returns integer
begin
declare d_count integer;
select count(*) into d_count
from instructor
where instructor.dept_name = dept_name
return d_count;
end

select dept name, budget
from instructor
where dept_count(dept_name) > 12;

-- table function ( parameterized view )

create function instructor_of (dept_name varchar(20))
returns table (
ID varchar (5),
name varchar (20),
dept_name varchar (20),
salary numeric (8,2))
return table
(select ID, name, dept name, salary
from instructor
where instructor.dept name = instructor of.dept name);

select *
from table(instructor_of('Finance'));

-- procedure

create procedure dept_count_proc(in dept_name varchar(20), out d_count integer)
begin
select count(*) into d_count
from instructor
where instructor.dept_name = dept_count_proc.dept_name
end

declare d_count integer;
call dept_count_proc(’Physics’, d_count);

create function_registerStudent(
in s_id varchar(5),
in s_courseid varchar (8),
in s_secid varchar (8),
in s_semester varchar (6),
in s_year numeric (4,0),
out errorMsg varchar(100)  )
returns integer
begin
declare currEnrol int;
select count(*) into currEnrol
from takes
where course_id = s_courseid and sec_id = s_secid and semester = s_semester and year = s_year;
declare limit int;
select capacity into limit
from classroom natural join section
where course_id = s_courseid and sec_id = s_secid and semester = s_semester and year = s_year;
if (currEnrol < limit)
begin
insert into takes values (s_id, s_courseid, s_secid, s_semester, s_year, null);
return(0);
end
set errorMsg = ’Enrollment limit reached for course ’ || s_courseid || ’ section ’ || s_secid;
return(-1);
end;

-- loop

while <boolean_expression> do
<sequence_of_statements>;
end while

repeat
<sequence_of_statements>;
until <boolean_expression>
end repeat

declare n integer default 0;
for r as
select budget from department
where dept_name = ‘Music‘
do
set n = n− r.budget
end for

-- conditionals

if <boolean_expression>
then <statement>
elseif <boolean_expression>
then <statement>
else <statement>
end if

SELECT OrderID, Quantity,
CASE
    WHEN Quantity > 30 THEN "The quantity is greater than 30"
    WHEN Quantity = 30 THEN "The quantity is 30"
    ELSE "The quantity is under 30"
END
FROM OrderDetails;

triangle(t) -> x,y,z
select *,  IF(x + y > z AND x + z > y AND y + z > x, 'Yes', 'No') as triangle 
from triangle;

-- Trigger

create trigger timeslot_check1 after insert on section  
referencing new row as nrow  
for each row  
when (nrow.time_slot_id not in (select time_slot_id from time_slot))  
begin  
rollback  
end;  

create trigger timeslot_check2 after delete on timeslot  
referencing old row as orow  
for each row  
when (orow.time_slot_id not in (select time_slot_id from time_slot)  
and orow.time_slot_id in (select time_slot_id from section))  
begin
rollback
end;

create trigger credits_earned after update of takes on (grade)
referencing new row as nrow
referencing old row as orow
for each row
when nrow.grade <> ’F’ and nrow.grade is not null and (orow.grade = ’F’ or orow.grade is null)
begin atomic
update student
set tot_cred= tot_cred + (select credits from course where course.course_id= nrow.course_id)
where student.id = nrow.id;
end;

-- rank

select ID, rank () over (order by (GPA) desc) as s_rank
from student_grades
order by s_rank;

select ID, (1 + (select count(*) from student_grades B where B.GPA > A.GPA)) as s_rank  
from student_grades A  
order by s_rank;  

select ID, dept_name, rank () over (partition by dept_name order by GPA desc) as dept_rank
from dept_grades
order by dept name, dept rank;

select ID, GPA
from student_grades
order by GPA
limit 10;

select ID, ntile(4) over (order by (GPA desc)) as quartile
from student grades;

select ID, rank () over (order by GPA desc nulls last) as s_rank
from student grades;

select year, avg(num credits) over (order by year rows between 3 preceding and 2 following) as avg_total_credits
from tot credits;

select year, avg(num credits) over (order by year range between year - 4 and year) as avg total credits
from tot credits;

select dept_name, year, avg(num credits)
over (partition by dept_name order by year rows between 3 preceding and current row)
as avg_total_credits
from tot_credits_dept;

-- olap

select * from sales
pivot ( sum(quantity) for color in (’dark’,’pastel’,’white’) )
order by item_name;


-- recursion


-- tools
date(string)
datediff( end_date, begin_date )


 

