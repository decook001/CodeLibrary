Required theories
1. iff a===c (mod b) then a=c+bx where a,b,c,x is in Z
2. iff a>0 and a|b then gcd(a,b)=a
3. gcd(a,b)=c iff c|(a-b) aka a-b=ck aka a===b (mod c)

Euclidean algo says
a===c (mod b) iff  gcd(a,b)=gcd(b,c)
or
a=bx+c iff  gcd(a,b)=gcd(b,c)


proof:

let gcd(a,b) = g1, gcd(b,c)=g2

step 1:
g1|b -> g1|bx
g1|a, g1|bx -> g1|(a-bx) 
-> g1|c 
-> gcd(g1,c)=g1 
-> gcd(a,b,c)=g1

step 2:
g2|b -> g2|bx 
g2|bx, g2|c -> g2|(bx+c) 
-> g2|a 
-> gcd(g2,a)=g2 
-> gcd(a,b,c)=g2 

step 3:
-> g1=g2=gcd(a,b,c)
-> gcd(a,b)=gcd(b,c) 


resources - 
https://www.whitman.edu/mathematics/higher_math_online/section03.03.html
https://www.youtube.com/watch?v=cOwyHTiW4KE
