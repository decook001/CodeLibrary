
---------------------------------------LEETCODE---------------------------------

https://libaoj.in/LeetCode-Solutions/SQL/

# 176

with aha as
(
    select e.salary, rank() over ( order by e.salary desc ) as rnk
    from Employee e
    group by e.salary
),
abar as
(
    select count(*) as cnt
    from aha a
)

select
(
    case 
    when b.cnt>=2 then 
    (
        select a.salary
        from aha a
        where a.rnk=2
    )
    else null
    end
) SecondHighestSalary
from  abar b



# 177

CREATE FUNCTION getNthHighestSalary(n INT) RETURNS INT
BEGIN
    return
    (
        with abar as
        (
            select e.salary, rank() over ( order by e.salary desc ) rnk
            from Employee e
            group by e.salary
        ),
        aha as
        (
            select count(*) cnt from abar a
        )
        select 
        (
            case
            when a.cnt>=n then 
            (
                select b.salary
                from abar b
                where b.rnk=n
            )
            else null
            end
        )
        from aha a
    );
END



# 178

select s.score, dense_rank() over ( order by s.score desc ) as "rank"
from Scores s



# 180

with aha as 
(
    select l1.id, l1.num
    from Logs l1 inner join Logs l2
    on l1.num=l2.num and l1.id+1=l2.id
)

select distinct l1.num as ConsecutiveNums
from Logs l1 inner join aha a
on l1.num=a.num and l1.id+1=a.id



# 184

with aha as
(
    select d.id, max( e.salary ) as maxi, d.name
    from Employee e inner join Department d
    on e.departmentId=d.id
    group by d.id
)

select a.name Department, e.name Employee , e.salary
from aha a inner join Employee e
on a.id=e.departmentId and a.maxi=e.salary



# 185

with aha as
(
    select e.departmentId, e.salary, 
    dense_rank() over ( partition by e.departmentId order by e.salary desc ) as rnk
    from Employee e
),
abar as
(
    select a.departmentId, a.salary as maxi, d.name
    from aha a inner join Department d
    on a.departmentId=d.id and a.rnk<=3
    group by a.departmentId, a.rnk
)

select a.name as "Department", e.name as "Employee", e.salary as "Salary"
from Employee e inner join abar a
on e.departmentId=a.departmentId and e.salary=a.maxi



# 262

with User as
(
    select * 
    from Users u
    where u.banned="No"
),
com as
(
    select t.id, t.driver_id, t.request_at, t.status
    from Trips t inner join User u
    on t.client_id=u.users_id
),
abar as
(
    select t.id, t.request_at, t.status
    from com t inner join User u
    on t.driver_id=u.users_id
),
fir as
(
    select count(*) cnt, a.request_at
    from abar a
    group by a.request_at
),
ses as
(
   select count(*) as cnt, a.request_at
   from abar a
   where a.status!="completed"
   group by a.request_at
)

select f.request_at as "Day", 
round( if(s.cnt is null, 0, s.cnt) /f.cnt, 2 ) as "Cancellation Rate"
from fir f left join ses s
on f.request_at=s.request_at
where f.request_at between date( "2013-10-01" ) and date( "2013-10-03" )



# 550

with flin as
(
    select player_id, min( event_date ) as date
    from activity
    group by player_id
),
slin as
(
    select t.player_id as id, min( t.event_date ) as date
    from activity t inner join flin on flin.player_id=t.player_id
    where t.event_date <> flin.date
    group by t.player_id
),
nmbr as
(
    select count(*) as aha
    from flin inner join slin on flin.player_id=slin.id
    where datediff( slin.date, flin.date ) = 1
),
tot as
(
    select count( distinct player_id ) as aha from activity
)

select round( nmbr.aha/tot.aha, 2 ) as fraction
from nmbr, tot


# 585

with tivff as
(
    select i.tiv_2015 as tiv
    from Insurance i 
    group by i.tiv_2015
    having count( distinct i.pid) > 1
),
places as
(
    select j.lat as lat, j.lon as lon
    from insurance j
    group by j.lat, j.lon
    having count( distinct j.pid ) =1
)

select   round(sum(k.tiv_2016),2) as tiv_2016
from insurance k, places, tivff
where k.tiv_2015 in ( tivff.tiv ) 

# 601

with ses as
(
    select s.id
    from Stadium s left join Stadium t
    on s.id+1=t.id
    where s.people >= 100 and (t.people is null or t.people<100 )
),
suru as
(
    select s.id
    from Stadium s left join Stadium t
    on s.id-1=t.id
    where (t.people is null or t.people<100) and s.people >= 100
),
suruses as
(
    select p.id as suru, min( q.id ) as ses
    from suru p inner join ses q
    on p.id<=q.id
    group by p.id
    having min( q.id )>=p.id+2
)

select s.id, s.visit_date, s.people
from suruses v inner join Stadium s
on s.id>=v.suru && s.id<=v.ses
order by s.visit_date asc



# 602

with lft as
(
    select ra.requester_id as id, 
    (
        select count(*)
        from RequestAccepted rb
        where id=rb.requester_id or id=rb.accepter_id
    ) as num
    from RequestAccepted ra
    group by ra.requester_id
    order by num desc
    limit 1
),
rit as
(
    select ra.accepter_id as id, 
    (
        select count(*)
        from RequestAccepted rb
        where id=rb.requester_id or id=rb.accepter_id
    ) as num
    from RequestAccepted ra
    group by ra.accepter_id
    order by num desc
    limit 1
)

select 
(
    case 
    when lft.num>=rit.num then lft.id
    else rit.id
    end
) as id ,
(
    case 
    when lft.num>=rit.num then lft.num
    else rit.num
    end
) as num 
from lft, rit


# 608

select t.id, 
(
    case
    when t.p_id is null then "Root"
    when t.id in ( select a.p_id from Tree a ) then "Inner"
    else "Leaf"
    end 
) type
from Tree as t

# 626

with por as
(
    select s.id, t.student
    from Seat s left join Seat t
    on s.id+1=t.id
),
age as
(
    select s.id, t.student
    from Seat s left join Seat t
    on s.id-1=t.id
),
mix as
(
    select p.id,
    (
        case 
        when p.id%2=1 then p.student
        else a.student
        end
    ) student
    from por p inner join age a
    on p.id=a.id
)

select m.id,
(
    case
    when m.student is null then s.student
    else m.student
    end
) student
from mix m inner join Seat s
on m.id=s.id



# 1045

with aha as
(
  select count( distinct p.product_key ) as "cnt"
  from Product p
)

select c.customer_id
from Customer c, aha a
group by c.customer_id
having count(distinct c.product_key )=min(a.cnt)


# 1070

with aha as
(
    select s.product_id, min( s.year ) as first_year
    from Sales s
    group by s.product_id
)

select s.product_id, aha.first_year, s.quantity, s.price
from Sales s inner join aha 
on (s.year=aha.first_year and s.product_id=aha.product_id)


# 1158

with aha as
(
  select o.buyer_id, count( distinct o.order_id ) cnt
  from Orders o
  where o.order_date between date( "2019-01-01" ) and date( "2019-12-31" )
  group by o.buyer_id
)

select u.user_id buyer_id, u.join_date , 
(
  case 
  when a.cnt is null then 0
  else a.cnt
  end
) orders_in_2019
from Users u left join aha a
on u.user_id=a.buyer_id



# 1164

with aha as
(
    select p.product_id, p.change_date, p.new_price,
    rank() over ( partition by p.product_id order by p.change_date desc ) as c_rank
    from Products p
    where p.change_date <= date( "2019-08-16" )
),
aro as
(
    select aha.product_id as id, aha.change_date, aha.new_price
    from aha 
    where aha.c_rank=1
),
abaro as
(
    select distinct p.product_id as id
    from Products p
)

select abaro.id as product_id,
(
    case 
    when aro.new_price is null then 10
    else aro.new_price
    end
) as price
from abaro left join aro 
on abaro.id=aro.id



# 1173

with aha as
(
    select count(d.delivery_id) as cnt
    from Delivery d
    where datediff( d.customer_pref_delivery_date, d.order_date )=0
),
abar as
(
    select count(*) as cnt
    from Delivery d
)

select round( a.cnt/b.cnt*100, 2 ) as immediate_percentage
from aha a, abar b


# 1174

with aha as
(
    select d.customer_id, min( d.order_date ) as order_date
    from Delivery d
    group by d.customer_id
),
abar as
(
    select count(*) as cnt
    from aha a inner join delivery d 
    on ( a.customer_id=d.customer_id and a.order_date=d.order_date )
    where d.order_date=d.customer_pref_delivery_date
),
barbar as
(
    select count(*) as cnt
    from aha
)

select round( abar.cnt/barbar.cnt*100, 2 ) as immediate_percentage
from abar, barbar



# 1193

with aha as
(
    select substr(t.trans_date,1,7) as month, 
    t.country, sum(t.amount) as trans_total_amount, 
    count(id) as trans_count
    from Transactions t
    group by month, t.country
),
abar as
(
    select substr(t.trans_date,1,7) as month, 
    t.country, sum(t.amount) as approved_total_amount, 
    count(id) as approved_count
    from Transactions t
    where t.state="approved"
    group by month, t.country
)

select aha.month, aha.country, aha.trans_count, 
( 
    case 
    when  abar.approved_count is null then 0
    else abar.approved_count
    end
) as approved_count,
aha.trans_total_amount, 
(
    case
    when abar.approved_total_amount is null then 0
    else abar.approved_total_amount
    end
) as approved_total_amount
from aha left join abar 
on ( aha.month=abar.month and aha.country=abar.country )



# 1204

with aha as
(
  select *, 
  sum(weight) over ( order by turn asc ) as cumuwt
  from queue
)

select aha.person_name
from aha
where aha.cumuwt<=1000
order by aha.cumuwt desc
limit 1


# 1321

with aha as
(
    select c.visited_on, sum( c.amount ) as amount
    from Customer c
    group by c.visited_on
),
mini as
(
    select min( visited_on ) as mini
    from aha
)

select a.visited_on, sum( b.amount ) as amount,
round( sum( b.amount )/7, 2 ) as average_amount
from aha as a, aha as b, mini
where datediff( a.visited_on, b.visited_on ) <=6 
and datediff( a.visited_on, b.visited_on ) >=0
and datediff( a.visited_on, mini.mini ) >= 6
group by a.visited_on
order by a.visited_on



# 1341

with aha as
(
    select mr.movie_id as id, avg( mr.rating ) as av
    from MovieRating mr
    where substr( mr.created_at, 1, 7 ) = "2020-02"
    group by mr.movie_id
),
abar as
(
    select *
    from aha inner join Movies m
    on aha.id=m.movie_id
    order by aha.av desc, m.title asc
    limit 1
),
eibar as
(
    select mr.user_id as id , count(*) as cnt, u.name
    from MovieRating mr inner join Users u
    on mr.user_id=u.user_id
    group by mr.user_id
    order by cnt desc, u.name asc
    limit 1
),
ses as
(
    ( select eibar.name from eibar ) union all ( select abar.title from abar )
)

select ses.name as results
from ses


# 1393

with aha as
(
    select s.stock_name, s.operation, sum( s.price ) kan
    from Stocks s
    group by s.stock_name, s.operation
),
abar as
(
    select a.stock_name, a.kan buy, b.kan sell
    from aha a inner join aha b
    on a.stock_name=b.stock_name 
    where (a.operation='Buy' and  b.operation='Sell')
)

select a.stock_name, ( a.sell - a.buy ) as "capital_gain_loss"
from abar a


# 1907


with aha as
(
    select a.account_id,
    (
        case
        when a.income < 20000 then "Low Salary"
        when a.income > 50000 then "High Salary"
        else "Average Salary"
        end
    ) as category
    from Accounts a
)

(select "Low Salary" as category, count( distinct a.account_id ) as accounts_count
from aha a
where a.category= "Low Salary" )
union
(select "Average Salary" as category, count( distinct a.account_id ) as accounts_count
from aha a
where a.category= "Average Salary" )
union
(select "High Salary" as category, count( distinct a.account_id ) as accounts_count
from aha a
where a.category= "High Salary" )


# 1934

with req as
(
    select c.user_id, count(*) as cnt
    from Confirmations c
    group by c.user_id
),
conf as
(
    select c.user_id, count(*) as cnt
    from Confirmations c
    where c.action="confirmed"
    group by c.user_id
),
rate as
(
    select r.user_id, round(c.cnt/r.cnt, 2) as rate
    from req r inner join conf c
    on r.user_id=c.user_id
)

select s.user_id,
(
    case 
    when r.rate is null then 0
    else r.rate
    end
)as confirmation_rate
from Signups s left join rate r
on s.user_id=r.user_id




------------------------------------Hackerrank---------------------------------


# binary tree nodes

select N as node, 
case 
    when P is null then "Root"
    when ( select count(*) from BST where P=node ) = 0 then "Leaf"
    else "Inner"
end
from BST
order by node asc

// alt 

select a.N,
(
    case
    when a.P is null then "Root"
    when a.N in 
    (
    select b.N
    from BST b left join BST c
    on b.N=c.P
    where c.N is null
    ) then "Leaf"
    else "Inner"
    end
)
from BST a
order by a.N

# Challenges


with uva as
(
    select h.hacker_id, count(distinct h.challenge_id) as cnt
    from Challenges h
    group by h.hacker_id
),
uva1 as
(
    select max( u.cnt ) as mx
    from uva u
),
uva2 as
(
    select h.hacker_id, h.name, u.cnt
    from Hackers h inner join uva u on ( h.hacker_id=u.hacker_id ),uva1 u1
    where u.cnt=u1.mx
)
select * from uva2 u
order by u.hacker_id;

with uva as
(
    select h.hacker_id, count(distinct h.challenge_id) as cnt
    from Challenges h
    group by h.hacker_id
),
uva1 as
(
    select max( u.cnt ) as mx
    from uva u
),
uva2 as
(
    select u.cnt
    from uva u, uva1 u1
    where u.cnt<u1.mx 
    group by u.cnt
    having count( u.hacker_id )=1
),
uva3 as
(
    select u.hacker_id, u.cnt
    from uva u inner join uva2 u2 on u.cnt=u2.cnt
)

select h.hacker_id, h.name, u.cnt
from Hackers h inner join uva3 u on h.hacker_id=u.hacker_id
order by u.cnt desc;


# contest leadeboard


with aha as
(
    select s.hacker_id, max(s.score) as score
    from Submissions s
    group by s.hacker_id, s.challenge_id
),
abar as
(
    select a.hacker_id, sum(a.score) as sum
    from aha a
    group by a.hacker_id
    having sum( a.score )>0
)

select a.hacker_id, h.name, a.sum
from abar a inner join Hackers h
on a.hacker_id=h.hacker_id
order by a.sum desc, a.hacker_id asc


# draw the triangle 2

DELIMITER $$

CREATE PROCEDURE P(R int, x int) 
BEGIN
   WHILE x<=R DO
       SELECT REPEAT("* ", x);
       set x=x+1;
   END WHILE;
END$$

CREATE PROCEDURE QQ(R int, x int) 
BEGIN
   WHILE x<=R DO
       SELECT REPEAT("$ ", x);
       set x=x+1;
   END WHILE;
END$$

DELIMITER ;

CALL P(20,1);

# interviews

with aha as
(
    select c.contest_id, n.challenge_id
    from Colleges c inner join Challenges n
    on c.college_id=n.college_id
)
,
Stat as
(
    select c.contest_id, sum( v.total_views ) as totv,
    sum( total_unique_views ) as uv
    from View_Stats v inner join aha c
    on v.challenge_id=c.challenge_id
    group by c.contest_id
),
Sub as
(
    select c.contest_id, sum(total_submissions) as totsub,
    sum(total_accepted_submissions) as ac
    from aha c inner join Submission_Stats s
    on c.challenge_id=s.challenge_id
    group by c.contest_id
),
Combi as
(
    select s.contest_id, s.totv, s.uv, b.totsub, b.ac
    from Stat s inner join Sub b
    on s.contest_id=b.contest_id
    where s.totv+s.uv+b.totsub+b.ac>0
)

select c.contest_id, t.hacker_id, t.name, c.totsub, c.ac, c.totv, c.uv
from Combi c inner join Contests t
on c.contest_id=t.contest_id
order by c.contest_id


# new companies


with clm as
(
    select lm.company_code, count( distinct lm.lead_manager_code ) clm
    from Lead_Manager lm
    group by lm.company_code
),
csm as
(
    select lm.company_code, count( distinct lm.senior_manager_code ) csm
    from Senior_Manager lm
    group by lm.company_code
),
man as
(
    select lm.company_code, count( distinct lm.manager_code ) man
    from Manager lm
    group by lm.company_code
),
emp as
(
    select lm.company_code, count( distinct lm.employee_code ) emp
    from Employee lm
    group by lm.company_code
),
mix as
(
    select clm.company_code code, clm.clm, csm.csm, man.man, emp.emp
    from ((clm inner join csm on clm.company_code=csm.company_code) 
    inner join man on clm.company_code=man.company_code) 
    inner join emp on clm.company_code=emp.company_code
)

select c.company_code, c.founder, m.clm, m.csm, m.man, m.emp
from mix m inner join Company c
on c.company_code=m.code
order by c.company_code


# occupations (manual pivot)

with aha as
(
    select name, occupation, 
    row_number() over ( partition by occupation order by name ) rnum 
    from occupations
)

select  
min( case when a.occupation="Doctor" then a.name else null end ),
min( case when a.occupation="Professor" then a.name else null end ),
min( case when a.occupation="Singer" then a.name else null end ),
min( case when a.occupation="Actor" then a.name else null end )
from aha a
group by a.rnum;

# ollivander's inventory


with aha as
(
    select w.id, w.power, p.age, w.coins_needed, rank() over( partition by w.power, p.age order by w.coins_needed asc ) as num
    from Wands w inner join Wands_Property p on w.code=p.code
    where p.is_evil=0
)

select a.id, a.age, a.coins_needed, a.power
from aha a
where a.num=1
order by a.power desc, a.age desc


# placements


with friend_salary as
(
    select f.ID, p.Salary
    from Friends f inner join Packages p
    on f.Friend_ID=p.ID
),
abar as
(
    select f.ID, f.Salary
    from friend_salary f inner join Packages p
    on f.ID=p.ID
    where f.Salary>p.Salary
)

select s.Name 
from abar a inner join Students s
on a.ID=s.ID
order by a.Salary asc


# print prime numbers


DECLARE @result VARCHAR(MAX) = ''; 
DECLARE @i INT = 2; 
DECLARE @n INT; 
DECLARE @remainder INT;

WHILE @i <= 1000 BEGIN 
    SET @n = 2; 
    SET @remainder = 1;
    WHILE @n < @i BEGIN
        SET @remainder = @i % @n;
        IF (@remainder = 0) BREAK;
        SET @n += 1;
    END

    IF @remainder <> 0
        SET @result += CAST(@i AS VARCHAR) + '&';

    SET @i += 1;
END;

SET @result = LEFT(@result, LEN(@result) - 1);
PRINT @result;


# sql project planning

with lst as
(
    select p.End_Date, rank() over ( order by p.End_Date asc ) as rank
    from Projects p left join Projects q
    on p.End_Date=q.Start_Date
    where q.Start_Date is null
),
fst as
(
    select p.Start_Date, rank() over ( order by p.Start_Date asc ) as rank
    from Projects p left join Projects q
    on p.Start_Date=q.End_Date
    where q.End_Date is null
)

select f.Start_Date, l.End_Date
from fst f inner join lst l
on f.rank=l.rank
order by datediff(day, f.Start_Date, l.End_Date ) asc, f.Start_Date asc


# symmetric pairs

with aha as
(
    (select f.X, f.Y
    from Functions f
    where f.X=f.Y
    group by f.X,f.Y
    having count(*)>1)
    union
    (select f.X, f.Y
    from Functions f inner join Functions g
    on (f.X=g.Y and f.Y=g.X)
    where f.X < f.Y)
)

select * 
from aha a
order by a.X

# the pads

select CONCAT(Name,"(",left(Occupation,1),")")
from OCCUPATIONS
ORDER BY Name;

select  "There are a total of ",count(o.*), CONCAT(LOWER(o.Occupation),"s.")
from OCCUPATIONS o
group by (o.Occupation)
ORDER BY COUNT(*);


# the reports


with aha as
(
    select s.Name, g.Grade, s.Marks
    from Students s inner join Grades g
    on (s.Marks<=g.Max_Mark and s.Marks>=Min_Mark)
    where s.Marks >= 70
    order by g.Grade desc, s.Name asc
)
select * from aha a;


with abar as
(
    select g.Grade, s.Marks
    from Students s inner join Grades g
    on (s.Marks<=g.Max_Mark and s.Marks>=Min_Mark)
    where s.Marks<70
    order by g.Grade desc, s.Marks asc
)
select "NULL", a.*
from abar a;


# top competitors

with challege_score as
(
    select c.challenge_id, d.score
    from Challenges c inner join Difficulty d
    on c.difficulty_level=d.difficulty_level
),
full_score_sub as
(
    select s.hacker_id, count(*) as cnt
    from Submissions s inner join challege_score a
    on (s.challenge_id=a.challenge_id and s.score=a.score)
    group by s.hacker_id
    having count(*) > 1
),
last_one as
(
    select h.hacker_id, h.name, f.cnt
    from Hackers h inner join full_score_sub f
    on ( h.hacker_id=f.hacker_id )
)

select l.hacker_id, l.name
from last_one l
order by l.cnt desc, l.hacker_id asc


# wos 18

select round(-min( LAT_N ) - min( LONG_W ) + max( LAT_N )  + max( LONG_W ), 4) 
from STATION 


# wos 19

select 
round( sqrt(
(max(LAT_N)-min(LAT_N))*(max(LAT_N)-min(LAT_N))+
(max(LONG_W)-min(LONG_W))*(max(LONG_W)-min(LONG_W)) 
) , 4)
from STATION

# wos 20

with aha as
(
    select s.LAT_N, row_number() over ( order by s.LAT_N asc ) acend
    from STATION s
),
abar as
(
    select s.LAT_N, row_number() over ( order by s.LAT_N desc ) dcend
    from STATION s
)

select round( a.LAT_N, 4 )
from aha a inner join abar b
on a.LAT_N=b.LAT_N
where a.acend=b.dcend or a.acend+1=b.dcend