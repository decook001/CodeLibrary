
https://www.w3resource.com/mongodb-exercises/#MongoDB_restaurants


-- sample_restaurants/restaurants --

#1
db.restaurants.find()

#2
db.restaurants.find({}, { "restaurant_id": 1, "name": 1, "borough": 1, "cuisine": 1})

#3
db.restaurants.find({}, { "_id":0, "restaurant_id": 1, "name": 1, "borough": 1, "cuisine": 1})

#4
db.restaurants.find({}, { "_id":0, "restaurant_id": 1, "name": 1, "borough": 1, "address.zipcode": 1})

#5
db.restaurants.find({"borough": "Bronx" })

#6
db.restaurants.find({"borough": "Bronx" }).limit(5)

#7
db.restaurants.find({"borough": "Bronx"}).skip(5).limit(5);

#8
db.restaurants.find({grades : { $elemMatch:{"score":{$gt : 80 }}}})

#9
db.restaurants.find({grades : { $elemMatch:{"score":{$gt : 80, $lt: 100 }}}}) searches for atleast one score lt 100 and gt 80

nb - db.restaurants.find({ "grades.score": {$gt : 101, $lt: 100 } } ) searches for any restaurant which has at least one score gt 80 and at least one score lt 100

#10
db.restaurants.find({"address.coord" : {$lt : -95.754168}})

#11 / 12 
db.restaurants.find({ "cuisine" : {$ne :"American"}, "grades.score" : {$gt : 70}, "address.coord" : {$lt : -65.754168} })
db.restaurants.find( {$and: [{"cuisine" : {$ne :"American "}}, {"grades.score" : {$gt : 70}}, {"address.coord" : {$lt : -65.754168}} ] });

#13
db.restaurants.find({ cuisine : {$ne :"American"}, borough : { $ne:"Brooklyn"}, "grades.grade" : "A" }).sort({cuisine:-1})

#14
db.restaurants.find( {name: /^Wil/}, { restaurant_id : 1, name:1, borough :1, cuisine :1 })

#15
db.restaurants.find( {name: /ces$/}, { restaurant_id : 1, name:1, borough :1, cuisine :1 })

#16
db.restaurants.find( {name: /.*Reg.*/ }, { restaurant_id : 1, name:1, borough :1, cuisine :1 })

#17
db.restaurants.find({ borough: "Bronx" , $or : [{ cuisine : "American" }, { cuisine : "Chinese" }]  })

#18
db.restaurants.find({  $or : [ { borough: "Staten Island"}, { borough: "Queens"}, { borough: "Bronx"},{borough:"Brooklyn"} ]  },{ restaurant_id:1, name:1, borough:1, cuisine:1} )

#19
db.restaurants.find( { borough: {$nin: [ "Staten Island", "Queens", "Bronx", "Brooklyn" ] }})

#20
db.restaurants.find( {"grades.score" : {$lte : 10} }, { "restaurant_id" : 1, "name":1, "borough":1, cuisine: 1})

#21
db.restaurants.find( 
{$or:[
      {name: /^Wil/}, 
      {"$and":[{"cuisine" : {$ne :"American"}}, {"cuisine" : {$ne :"Chinese"}} ]}
    ]
},
{"restaurant_id" : 1,"name":1,"borough":1,"cuisine" :1}
)

#22

db.restaurants.find({grades : { $elemMatch: {$and: [ {score: 11 }, {grade: "A" }, { "date": ISODate("2014-08-11T00:00:00Z")} ] }}})
or
db.restaurants.find({ grades : { $elemMatch: {$and: [ {score: 11 }, { "date": ISODate("2014-08-11T00:00:00Z")} ] }}})
// as score 11 wiil bring grade "A" by default

#23
db.restaurants.find( 
                      { 
			"grades.1.date": ISODate("2014-08-11T00:00:00Z"), 
                        "grades.1.grade":"A",
                        "grades.1.score" : 9
                      }, 
                       {"restaurant_id" : 1,"name" : 1, "grades" :1}
                   );


#24
db.restaurants.find( 
                      { "address.coord.1": {$gt : 42, $lte : 52} },
                      { "restaurant_id" : 1,"name":1,"address":1,"coord":1}
                   );


#25
db.restaurants.find({}, {name:1, _id:0} ).sort({name:1})

#26
db.restaurants.find({}, {name:1, _id:0} ).sort({name:-1})

#27
db.restaurants.find( ).sort({ cuisine:1, borough: -1 })

#28
db.restaurants.find( {"address.street" : { $exists : false }}  );

#29
db.restaurants.find( {"address.coord" : {$type : 1} });

#30
db.restaurants.find( {"grades.score" : {$mod : [7,0]}}, {"restaurant_id" : 1,"name":1,"grades":1} );

#31
db.restaurants.find( { name: { $regex: ".*mon.*", $options: "i" } }, { "name": 1, "borough": 1, "address.coord": 1, "cuisine": 1 } );

#32
db.restaurants.find( { name: { $regex: "^Mad" }}, { "name": 1, "borough": 1, "address.coord": 1, "cuisine": 1 } );

#33
db.restaurants.find( {"grades.score" : {$lt : 5} });

#34
db.restaurants.find( {"grades.score" : {$lt : 5}, borough: "Manhattan" });

#35
db.restaurants.find( {"grades.score" : {$lt : 5}, borough: {$in :["Manhattan", "Brooklyn"]} });

#36
db.restaurants.find( {"grades.score" : {$lt : 5}, borough: {$in :["Manhattan", "Brooklyn"]}, cuisine: {$nin: ["American"]} });

#37
db.restaurants.find( {"grades.score" : {$lt : 5}, borough: {$in :["Manhattan", "Brooklyn"]}, cuisine: {$nin: ["American", "Chinese"]} });

#38
db.restaurants.find( { $and: [ {"grades.score" : 2}, {"grades.score": 6}] });

not db.restaurants.find({"grades.score" : 2, "grades.score": 6 }); 

#39
db.restaurants.find( { $and: [ {"grades.score" : 2}, {"grades.score": 6}, {borough: "Manhattan"}] });

#40
db.restaurants.find( { $and: [ {"grades.score" : 2}, {"grades.score": 6}, { $or : [{borough: "Manhattan"}, {borough: "Brooklyn"}] }] });

#41
db.restaurants.find( { $and: [ {"grades.score" : 2}, {"grades.score": 6}, { $or : [{borough: "Manhattan"}, {borough: "Brooklyn"}] }, { cuisine: {$ne: "American" }} ] });

#42
db.restaurants.find( { $and: [ {"grades.score" : 2}, {"grades.score": 6}, { $or : [{borough: "Manhattan"}, {borough: "Brooklyn"}] }, { cuisine: {$nin: ["American", "Chinese"] }} ] });

#43
db.restaurants.find(   {    $or: [{ "grades.score": 2 }, { "grades.score": 6 } ]})

#44
db.restaurants.find({ $and: [  {$or: [{ "grades.score": 2 }, { "grades.score": 6 } ]}, { borough: "Manhattan" }] })

#45
db.restaurants.find({ $and: [  {$or: [{ "grades.score": 2 }, { "grades.score": 6 } ]}, {$or: [{borough: "Manhattan"}, {borough: "Brooklyn"}]} ]    })

#46
db.restaurants.find({ $and: [  {$or: [{ "grades.score": 2 }, { "grades.score": 6 } ]}, {$or: [{borough: "Manhattan"}, {borough: "Brooklyn"}]}, {cuisine:{$ne:"American"}} ]    })

#47
db.restaurants.find({ $and: [  {$or: [{ "grades.score": 2 }, { "grades.score": 6 } ]}, {$or: [{borough: "Manhattan"}, {borough: "Brooklyn"}]}, {cuisine:{$nin:["American" , "Chinese" ]}} ]    })

#48
db.restaurants.find(  {"grades": {"$not": {"$elemMatch": {"score": {"$lte": 5}}}}})

#49
db.restaurants.find( { $and: [ {borough: "Manhattan"} , {"grades": {"$not": {"$elemMatch": {"score": {"$lte": 5}}}}} ] })

#50
db.restaurants.find( { $and: [ { $or: [ {borough: "Manhattan"}, {borough: "Brooklyn"}] } , {"grades": {"$not": {"$elemMatch": {"score": {"$lte": 5}}}}} ] })

#51
db.restaurants.aggregate([  { $unwind: "$grades"},  { $group: {_id: "$name", avgScore: {$avg: "$grades.score"}}}  ])

#52
db.restaurants.aggregate([  { $unwind: "$grades"},  { $group: {_id: "$name", highest_score: {$max: "$grades.score"}}}  ])

#53
db.restaurants.aggregate([  { $unwind: "$grades"},  { $group: {_id: "$name", lowest_score: { $min: "$grades.score"}}}  ])

#54
db.restaurants.aggregate([ { $group: {_id: "$borough", count: { $sum : 1 }}}  ])

#55
db.restaurants.aggregate([ { $group: {_id: "$cuisine", count: { $sum : 1 }}}  ])

#56
db.restaurants.aggregate([ { $group: {_id: { cuisine: "$cuisine", borough: "$borough" }, count: { $sum : 1 }  } }  ])

#57
db.restaurants.aggregate([ { $match: { "grades.grade": "A" } },  { $group: { _id: "$cuisine", count: { $sum: 1 } }} ])

#58
db.restaurants.aggregate([ { $match: { "grades.grade": "A" } }, { $group: {_id: "$borough", count: { $sum: 1 } } } ])

#59
db.restaurants.aggregate([ { $match: { "grades.grade": "A" }}, { $group: { _id: { cuisine: "$cuisine", borough: "$borough" }, count: { $sum: 1 }} }, { $sort:{ count: -1 } } ])

#60
db.restaurants.aggregate([ { $unwind: "$grades" }, { $project: { month: { $month: { $toDate: "$grades.date" } }, year: { $year: { $toDate: "$grades.date" } } }}, { $group: { _id: { month: "$month", year: "$year" }, count: { $sum: 1 } }}, { $sort: { "_id.year": 1, "_id.month": 1 } }  ]);

db.restaurants.aggregate([ { $unwind: "$grades" }, { $project: { res_id: "$restaurant_id",  month: { $month: { $toDate: "$grades.date" } }, year: { $year: { $toDate: "$grades.date" } } }}, { $group: { _id: { res_id: "$restaurant_id" } , count: { $sum: 1 } } } ]);


#61
db.restaurants.aggregate([   {   $unwind: "$grades" }, { $group: { _id: "$cuisine", avgScore: { $avg: "$grades.score" } }} ])


#62
db.restaurants.aggregate([   {   $unwind: "$grades" }, { $group: { _id: "$cuisine", maxScore: { $max: "$grades.score" } }} ])


#63
db.restaurants.aggregate([   {   $unwind: "$grades" }, { $group: { _id: "$cuisine", minScore: { $min: "$grades.score" } }} ])


#64
db.restaurants.aggregate([   {   $unwind: "$grades" }, { $group: { _id: "$borough", avgScore: { $avg: "$grades.score" } }} ])


#65
db.restaurants.aggregate([   {   $unwind: "$grades" }, { $group: { _id: "$borough", maxScore: { $max: "$grades.score" } }} ])


#66
db.restaurants.aggregate([   {   $unwind: "$grades" }, { $group: { _id: "$borough", minScore: { $min: "$grades.score" } }} ])


#67
db.restaurants.find({ "grades": {"$elemMatch": { "date": {"$eq": ISODate("2013-07-22T00:00:00Z") }, "grade": {"$eq": "A"}} } }, { "name": 1, "address": 1, "_id": 0 })


#68
db.restaurants.find({ "grades": {"$elemMatch": { "date": {"$eq": ISODate("2013-07-22T00:00:00Z") }, "grade": {"$in": ["B", "C"]  }} } }, { "name": 1, "address": 1, "_id": 0 })


#69
db.restaurants.find({ $and: [ { "grades.grade": "A" }, { "grades.grade": "B" } ]}, { name: 1, address: 1, _id: 0 })


#70
db.restaurants.find({ $and: [ { "grades.grade": "A" }, {$nor :[{ "grades.grade": "B" }] } ]}, { name: 1, address: 1, _id: 0 })


#71
db.restaurants.find({ $and: [ { "grades.grade": "A" }, {$nor :[{ "grades.grade": "C" }] } ]}, { name: 1, address: 1, _id: 0 })

#72
db.restaurants.find({ $and: [ { "grades.grade": "A" }, {$nor :[{ "grades.grade": "C" }, { "grades.grade": "B" }  ] } ]}, { name: 1, address: 1, _id: 0, grades: 1 })

#73
db.restaurants.find({ name: { $regex: /coffee/i } }, { name: 1, address: 1 })

#74
db.restaurants.find({ "address.zipcode" : { $regex: /^10/ } }, { name: 1, address: 1 })

#75
db.restaurants.find({ cuisine: { $regex: /^B/i } }, { name: 1, address: 1 })

#76
db.restaurants.find({ cuisine: { $regex: /y$/i } }, { name: 1, address: 1, cuisine: 1 })

#77
db.restaurants.find({ cuisine: { $regex: /pizza/i } }, { name: 1, address: 1, cuisine: 1 })

#78
db.restaurants.aggregate([ {$unwind: "$grades"}, {$group: {_id: "$restaurant_id", avgScore: {$avg: "$grades.score"} }}, {$sort: {avgScore: -1}}, {$limit: 1} ])

#79
db.restaurants.aggregate([ {$unwind: "$grades"}, {$match: {"grades.grade": "A"}}, {$group: { _id: "$restaurant_id", count: {$sum: 1} }}, {$sort: {count: -1}}, {$group: { _id: "$count", restaurants: {$push: "$_id"} }}, {$sort: {_id: -1}}, {$limit: 1}, {$project: {restaurants: 1}} ])

#80
db.restaurants.aggregate([ {$unwind: "$grades"}, {$match: {"grades.grade": "C"}}, {$group: {_id: "$cuisine", count: {$sum: 1}}}, {$sort: {count: -1}} ])

#81
db.restaurants.aggregate([ {$match: {"cuisine": "Turkish"}}, {$unwind: "$grades"},  {$group: {_id: "$restaurant_id", avgScore: {$avg: "$grades.score"} }}, {$group: { _id: "$avgScore", restaurants: {$push: "$_id"} }}, {$sort: {_id: -1}}, {$limit: 1} ])

#82
db.restaurants.aggregate([  {$unwind: "$grades"},  {$group: {_id: "$restaurant_id", totScore: {$sum: "$grades.score"} }}, {$group: { _id: "$totScore", restaurants: {$push: "$_id"} }}, {$sort: {_id: -1}}, {$limit: 1} ])

#83
db.restaurants.find( {$and: [ { cuisine: "Chinese" }, {borough: "Brooklyn"} ]} )

#84
db.restaurants.aggregate([ { $unwind: "$grades" }, { $sort: { "grades.date": -1 } }, { $limit: 1 }, { $project: { name: 1, "grades.date": 1, _id: 0 } } ])

#85
db.restaurants.aggregate([  {$unwind: "$grades"},  {$group: { _id: { cuisine: "$cuisine", restaurant_id: "$restaurant_id" }, avgScore: {$avg: "$grades.score" } }},  {$sort: { avgScore: -1 }},  {$group: { _id: "$_id.cuisine", topRestaurants: {$push: {restaurant_id: "$_id.restaurant_id", avgScore: "$avgScore"}} }}, {$project: { _id: 0, cuisine: "$_id", topRestaurants: {$slice: ["$topRestaurants", 5]} }}, {$sort : {cuisine:1}} ])

#86
db.restaurants.aggregate([  {$unwind: "$grades"},  {$match: {"grades.grade": "A"}},  {$group: {  _id: {borough: "$borough", restaurant_id: "$restaurant_id"}, gradeCount: {$sum: 1}  }},  {$sort: { gradeCount: -1  }},  {$group: {    _id: "$_id.borough", topRestaurants: {$push: {restaurant_id: "$_id.restaurant_id", gradeCount: "$gradeCount"}}  }},  {$project: {    _id: 0, borough: "$_id", topRestaurants: {$slice: ["$topRestaurants", 5]}  }} ])


#87
db.restaurants.aggregate([ {$match: {$and:[ {"grades.grade": "A"}, {"grades.score": { $gte: 90 } } ]} }, {$group : {_id: borough, cnt : {$sum:1} } }, {$sort: {cnt:-1}} , {$limit: 1}  ])



--  sample_mflix/movies


#1 
db.movies.find( { year: 1893 } )

#2
db.movies.find( { runtime: {$gt : 120 }} )

#3
db.movies.find({ genres : "Short" })

#4
db.movies.find({ directors: "William K.L. Dickson" })

#5
db.movies.find({ countries : "USA" })

#6
db.movies.find({ rated: {$regex: /unrated/i } })

#7
db.movies.find({ "imdb.votes" : {$gt: 1000} }).sort({"imdb.votes": -1})

#8
db.movies.find({ "imdb.rating" : {$gt: 7} })

#9
db.movies.find({ "tomatoes.rating" : {$gt: 7} })

#10
db.movies.find({ "tomatoes.viewer.rating" : {$gt: 4} })

#11
db.movies.find({ "awards.wins" : {$gt: 0 } })

#12
db.movies.find({ "cast" : { $regex: /Charles Kayser/i } })

#13
db.movies.find({ released: ISODate("1893-05-09T00:00:00.000Z") })

#14
db.movies.find({ title: { $regex: /scene/i } })

#15
db.movies.find({ "tomatoes.viewer.rating": { $lt: 4, $gte: 3 } } )

#16
db.movies.find({ year : { $lt : 1900 } })

#17
db.movies.find({ fullplot : { $regex : /fire/i } } )

#18
db.movies.find({ plot : { $regex : /beer/i } } )

#19
db.movies.find({ fullplot : { $regex : /metal/i } }, { title:1 , languages: 1, fullplot: 1, released: 1, directors: 1, writers: 1, countries: 1, _id: 0})

#20
db.movies.find({ runtime : { $gte: 60, $lte:90 } }, { title:1 , languages: 1, fullplot: 1, released: 1, directors: 1, writers: 1, countries: 1, _id: 0})

#21
db.movies.find({}, { title: 1, languages: 1, released: 1, runtime: 1, directors: 1, writers: 1, countries: 1, imdb: 1 }).sort({ "imdb.rating" : -1 }).limit(5)


#22
db.movies.aggregate([ {$unwind : "$countries"}  , { $match: { type: 'movie' } },  { $group: {  _id: '$countries', averageRuntime: { $avg: '$runtime' } }}  ])


#23
db.movies.aggregate([ {$unwind : "$genres"}  , { $group: {  _id: '$genres' , cnt: { $sum: 1 } }}, {$sort: { cnt : -1 } },  {$limit: 1}, {$project : { genre: "$_id", count: "$cnt", _id:0 } } ])

#24
db.movies.aggregate([ { $group: {  _id: '$year' , avgRating: { $avg: "$imdb.rating" }, movies : {$push: "$title"} }},  {$group : {_id: "$avgRating", mov: {$push: "$movies" }}  }, {$sort: {_id:-1} }, {$limit: 1}, {$unwind: "$mov"  }, {$unwind: "$mov"  }, {$project:  { _id:0, title: "$mov" }  }  ])

#25
db.movies.aggregate([ {$unwind : "$directors"},  { $group: {  _id: '$directors' , cnt: { $sum: 1 } } }, {$sort: {cnt:-1}  }, {$limit :10}, {$project: { director:"$_id", movies:"$cnt", _id:0  } }   ])

#26
db.movies.aggregate([ { $group: {_id: "$rated", avg : {$avg : "$imdb.rating" } } } ])

#27
db.movies.aggregate([ { $match: { "awards.wins": { $gt: 0 }  }  }, {$sort : { year: 1 } }, {$limit: 1}  ])

#28
db.movies.aggregate([ { $project: { _id: 0, title: 1, imdbRating: "$imdb.rating", tomatoViewerRating: "$tomatoes.viewer.rating" } }, {  $sort: { imdbRating: -1, tomatoViewerRating: -1 } }, { $limit: 1 } ])



-- sample_airbnb/listingsAndReviews

#1
db.listingsAndReviews.aggregate([ { $limit: 1 }, { $project: { price: 1, _id: 0 } } ])

#2
db.listingsAndReviews.aggregate([ { $limit: 1 }, { $project: { cleaning_fee: 1, _id: 0 } } ])

#3
db.listingsAndReviews.aggregate([ { $limit: 1 }, { $project: { "host.host_name" : 1, "host.host_location": 1, "host.host_about":1,  _id: 0 } } ])

#4
db.listingsAndReviews.aggregate([ { $limit: 1 }, { $project: { bedrooms: 1 } } ])

#5
db.listingsAndReviews.aggregate([ { $limit: 1 }, { $project: { guests: 1 } } ])

#6
db.listingsAndReviews.findOne({}, {"host.host_has_profile_pic": 1})

#7
db.listingsAndReviews.findOne({}, {"host.host_identity_verified": 1})

#8
db.listingsAndReviews.aggregate([ { $project: { host_listings_count: "$host.host_listings_count" } }, { $limit: 1 } ])

#9
db.listingsAndReviews.findOne({}, {"address.street": 1})

#10
db.listingsAndReviews.find({ property_type: "House" })

#11
db.listingsAndReviews.find(
  {
price: { $gt: 500 }
  },
  {
listing_url: 1,
name: 1,
    "host.host_name": 1,
    "host.host_location": 1,
    "reviews.reviewer_name": 1,
price: 1,
    _id: 0
  }
)

#12
db.listingsAndReviews.find(
    {
        "address.country": "Brazil",
        "review_scores.review_scores_rating": { $gte: 9 }
    },
    {
        "name": 1,
        "address": 1,
        "review_scores.review_scores_rating": 1,
        "_id": 0
    }
)


#13
db.listingsAndReviews.find
(
    {
        "address.country": "United States",
        "amenities": "Hot tub",
        "name": { "$exists": true },
        "address": { "$exists": true },
        "reviews.reviewer_name": { "$exists": true },
        "review_scores.review_scores_rating": { "$exists": true }
    },
    {
        "name": 1,
        "address": 1,
        "reviews.reviewer_name": 1,
        "review_scores.review_scores_rating": 1
    }
)

#14
db.listingsAndReviews.find({
amenities: "Pool",
price: {
    $gte: 200,
    $lte: 400},

        "name": { "$exists": true },
        "amenities": { "$exists": true },
        "review_scores.review_scores_rating": { "$exists": true }
  
},
{
name: 1,
amenities: 1,
price: 1,
  _id: 0
})

#15
db.listingsAndReviews.find
( { $and : [ { amenities: "Washer"}, { $or:[ { "address.country": "Canada" }, { "address.country": "Mexico" } ] } ] },
{ name: 1, amenities: 1, address: 1, _id: 0 }) 

#16
db.listingsAndReviews.aggregate([
{$unwind : "$reviews"},
  { $group: {
      _id: {
listing_url: "$listing_url",
name: "$name",
country: "$address.country",
review_scores: "$review_scores",
      },
count: { $sum: 1 },
    },
  },
  {
    $sort: { count: -1 },
  },
  {
    $limit: 10,
  },
  {
    $project: {
      _id: 0,
listing_url: "$_id.listing_url",
name: "$_id.name",
country: "$_id.country",
review_scores: "$_id.review_scores",
count: 1,
    },
  },
]);


#17
db.listingsAndReviews.find({
  "amenities": { $regex:  / fireplace /i } ,
  "review_scores.review_scores_rating": { $gte: 8 }
}, {
  "listing_url": 1,
  "name": 1,
  "address": 1,
  "review_scores": 1,
  "_id": 0
})

#18
db.listingsAndReviews.aggregate([ { $match: { $and : [ { amenities: "Washer" },  { $or : [ { "address.country": "Italy" }, { "address.country" : "Spain" } ] } ]  } }, { $project :  { listing_url:1 , name: 1, address: 1, amenities:1 } } ])

#19
db.listingsAndReviews.find(
{ "price": { "$exists": true } },
{ "listing_url": 1, "name": 1, "address": 1, "amenities": 1, "price": 1, "review_scores": 1 }
).sort({ "price": -1 }).limit(1)

#20
db.listingsAndReviews.find(
{ "price": { "$exists": true } },
{ "listing_url": 1, "name": 1, "address": 1, "amenities": 1, "price": 1, "review_scores": 1 }
).sort({ "price": 1 }).limit(1)

#21
db.listingsAndReviews.find(
{ "number_of_reviews": 0},
{ "listing_url": 1, "name": 1, "address": 1, "amenities": 1, "price": 1, "review_scores": 1 } )


#22
db.listingsAndReviews.find(
{ "host.host_is_super_host": 0},
{ "listing_url": 1, "name": 1, "address": 1, "amenities": 1, "price": 1, "review_scores": 1 } )


#23
db.listingsAndReviews.aggregate( [ { $unwind: "$address.location.coordinates" }, { $group: { _id: "$_id", cnt:{ $sum: 1 }, name: {$push :"$name" } } }, {$match : { cnt: {$ne: 0}  }  } ] )

#24
db.listingsAndReviews.find
(
{ "beds": { $gte: 2 } },
{ "name": 1, "address": 1, "host": 1, "bed_type": 1, "beds": 1, "review_scores.review_scores_rating": 1 }
)

#25
db.listingsAndReviews.find(
{ "host.host_name": { $regex: /Livia/i } },
{ name: 1, address: 1, host: 1 }
)

#26
db.listingsAndReviews.find(
{ "host.host_location": { $regex: /brazil/i } },
{ name: 1, address: 1, host: 1 }
)


#27
db.listingsAndReviews.find(
{ "availability.availability_365": { $gt: 300 } },
{ name: 1, address: 1, host: 1, availability: 1 }
)


#28
db.listingsAndReviews.find(
{ bedrooms: 1 },
{ listing_url: 1, name: 1, bedrooms: 1, price: 1 }
)


#29
db.listingsAndReviews.find(
{ cleaning_fee: { $ne: null } },
{ listing_url: 1, name: 1, bedrooms: 1, cleaning_fee:1,  price: 1 }
)


#30
db.listingsAndReviews.find(
{ price: { $gte: 600, $lte: 900 } },
{ listing_url: 1, name: 1, bedrooms: 1, price: 1 }
)


#31
db.listingsAndReviews.find({
  "host.host_verifications": "email"
}, {
listing_url: 1,
name: 1,
host: 1,
price: 1
})


#32
db.listingsAndReviews.find(
   { 
amenities: { $all: ["TV", "Wifi"] }
   },
   { 
listing_url: 1,
name: 1,
amenities: 1,
host: 1
   }
)


#33
db.listingsAndReviews.find({
  "host.host_verifications": "jumio",
  "host.host_about": { $exists: true, $ne: "" }
},
{
  "listing_url": 1,
  "name": 1,
  "amenities": 1,
  "host": 1
})


#34
db.listingsAndReviews.find({
  "host.host_total_listings_count": { $gt: 1 }
},
{
  "listing_url": 1,
  "name": 1,
  "host": 1,
  "price": 1
})


#35
db.listingsAndReviews.find({
  "property_type": "Apartment",
  "beds": { $gte: 2 }
},
{
  "listing_url": 1,
  "name": 1,
  "property_type": 1,
  "beds": 1,
  "price": 1
})


#36
db.listingsAndReviews.aggregate([
  {
    $match: {
      bathrooms: { $gte: 2 }
    }
  },
  {
    $project: 
{
      listing_url: 1,
      name: 1,
      property_type: 1,
      bed: 1,
      bathrooms: 1,
      price: 1
    }
  } 
])


#37
db.listingsAndReviews.aggregate([
  {
    $match: {
      guests_included: { $lte: 5 }
    }
  },
  {
    $project: {
      listing_url: 1,
      name: 1,
      property_type: 1,
      bed: 1,
      price: 1,
      guests_included: 1
    }
  }
])


#38
db.listingsAndReviews.aggregate([
  {
    $match: {
      price: { $gt: 500 },
      security_deposit: { $gte: 1000 }
    }
  },
  {
    $project: {
      listing_url: 1,
      name: 1,
      property_type: 1,
      bed: 1,
      price: 1,
      security_deposit: 1
    }
  }
])


#39
db.listingsAndReviews.aggregate([
  {
    $match: {
      cancellation_policy: "flexible"
    }
  },
  {
    $project: {
      listing_url: 1,
      name: 1,
      property_type: 1,
      bed: 1,
      price: 1,
      cancellation_policy: 1
    }
  }
])


#40
db.listingsAndReviews.aggregate([
  {
    $match: {
      bed_type: "Real Bed",
      amenities: "Kitchen"
    }
  },
  {
    $project: {
      listing_url: 1,
      name: 1,
      property_type: 1,
      bed_type: 1,
      amenities: 1,
      price: 1
    }
  }
])

#41
db.listingsAndReviews.find(
  {
    "address.country": "Brazil",
    "amenities": "24-hour check-in"
  },
  {
    "listing_url": 1,
    "name": 1,
    "address": 1,
    "amenities": 1
  }
)

#42
db.listingsAndReviews.find(
  {
    reviews: { $exists: true,  $size: 1 } 
  },
  {
    listing_url: 1,
    name: 1,
    address: 1,
    reviews: 1
  }
)

#43
db.listingsAndReviews.countDocuments({ "images.medium_url": "" });

#44
db.listingsAndReviews.find(
{ "availability.availability_30": { $gte: 30 } }, 
{ 
listing_url: 1, 
name: 1, 
address: 1, 
"availability.availability_30": 1 
})

#45
db.listingsAndReviews.find(
{ "address.suburb": "Lagoa" }, 
{ listing_url: 1, name: 1, address: 1 }
)

#46
db.listingsAndReviews.find(
  {
    "host.host_is_superhost": true,
    "host.host_total_listings_count": { $gte: 2 }
  },
  {
    listing_url: 1,
    name: 1,
    address: 1,
    host: 1
  }
)

#47
db.listingsAndReviews.find(
  {
    "host.host_has_profile_pic": true,
    "host.host_identity_verified": true
  },
  {
    listing_url: 1,
    name: 1,
    address: 1,
    host: 1
  }
)

#48
db.listingsAndReviews.aggregate([
  {
    $project: {
      "listing_url": 1,
      "name": 1,
      "address": 1,
      "host_verifications": "$host.host_verifications",
      "host_verifications_count": { $size: "$host.host_verifications" }
    }
  }
])

#49

db.listingsAndReviews.aggregate([
  {
    $match: {
      "host.host_verifications": { $exists: true },
      $expr: { $gte: [{ $size: "$host.host_verifications" }, 3] }
    }
  },
  {
    $project: {
      "listing_url": 1,
      "name": 1,
      "address": 1,
      "host.host_verifications": 1,
      "host_verifications_count": { $size: "$host.host_verifications" }
    }
  }
])


#50

db.listingsAndReviews.aggregate([ 
{ 
$match: { 
"host.host_picture_url": { $exists: true, $ne: null }
 } 
}, 
{ $project: { 
listing_url: 1, 
name: 1, 
address: 1, "host.host_picture_url": 1 
} 
}
])




































